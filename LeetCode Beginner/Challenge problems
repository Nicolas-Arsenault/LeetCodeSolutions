1. Running sum of a 1d array:

C# solution.

```
public class Solution 
{
    public int[] RunningSum(int[] nums) 
    {
        //Time O(n) solution
        //Space O(n) solution
        int[] runningSum = new int[nums.Length];
        runningSum[0] = nums[0];

        for(int i = 1; i < nums.Length; i ++)
        {
            runningSum[i] = nums[i] + runningSum[i-1];
        }

        return runningSum;
    }
}
```

2. Richest Customer Wealth

C# Solution

```
public class Solution 
{
    public int MaximumWealth(int[][] accounts) 
    {
        int sum = 0;
        int highest = 0;

        foreach(int[] money in accounts)
        {
            for(int i = 0; i < money.Length; i ++)
            {
                sum += money[i];
            }

            if(sum > highest)
            {
                highest = sum;
            }
            sum = 0;

        }

        return highest;
    }
}
```

3. FizzBizz

C#
```
public class Solution {
    public IList<string> FizzBuzz(int n) 
    {
        string[] answer = new string[n];
         


        for(int i = 0; i < n; i ++)
        {
            bool isDividableBy3 = (i+1) % 3 == 0;
            bool isDividableBy5 = (i+1) % 5 == 0;
            answer[i] = "";

            if(isDividableBy3)
            {
                answer[i] += "Fizz";
            }
            if(isDividableBy5)
            {
                answer[i] += "Buzz";
            }
            
            if(answer[i] == "")
            {
                answer[i] = (i+1).ToString();
            }
        }
        return answer;
    }
}
```

4. Number of Steps to Reduce a Number to Zero

C# -- With the modulo solution --

```
public class Solution 
{
    public int NumberOfSteps(int num) 
    {
        int nbSteps = 0;
        while(num != 0)
        {
            bool isEven = num % 2 == 0;

            num = isEven ? num / 2 : num - 1;
            nbSteps ++;
        }
        return nbSteps;
    }
}
```

C# -- With the bitwise Solution

```
public class Solution 
{
    public int NumberOfSteps(int num) 
    {
        int nbSteps = 0;
        while(num != 0)
        {
            bool isEven = (num & 1) == 0; //Compares xxxxxxx0 to 00000001 (1). If one of the two bits is 0, returns 0. 
            num = isEven ? num >> 1 : num - 1; // the operator >> is a right shift of all the bits of 1 space (divides by 2).
            nbSteps ++;
        }
        return nbSteps;
    }
}
```

C# -- Middle of a linked list

-- Copying values solution (not optimal):
```
/**
 * Definition for singly-linked list.
 * public class ListNode 
 * {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int val=0, ListNode next=null) {
 *         this.val = val;
 *         this.next = next;
 *     }
 * }
 */
public class Solution {
    public ListNode MiddleNode(ListNode head) 
    {
        //find the middle node number
        int length = 0;
        List<ListNode> array = new List<ListNode>();
        ListNode temp = head;
        while(temp != null)
        {
            array.Add(temp);
            temp = temp.next;
            length ++;
        }

        int middle = length / 2;
        return array.ElementAt(middle);
    }
}
```
-- Saving pointers solution (optimal)

```
/**
 * Definition for singly-linked list.
 * public class ListNode 
 * {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int val=0, ListNode next=null) {
 *         this.val = val;
 *         this.next = next;
 *     }
 * }
 */
public class Solution {
    public ListNode MiddleNode(ListNode head) 
    {
        ListNode middle = head;
        ListNode end = head;

        while(end != null && end.next != null) //we can keep track of the middle by moving it once every 2 steps...
        {
            middle = middle.next;
            end = end.next.next;
        }

        return middle;
    }
}
```
