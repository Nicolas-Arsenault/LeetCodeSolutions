C#.
we first check if we need to place flowers.
There is some ways to make this more modular, but this solution is quite quick.
go through the whole array and verify each case.
Again, this is repetitive, we could make a function to check if it is out of bound, etc...

```
public class Solution {
    public bool CanPlaceFlowers(int[] flowerbed, int n) 
    {
        if(n == 0) return true;
        for(int i = 0; i < flowerbed.Length; i ++)
        {
            if(flowerbed[i] == 1)
            {
                i ++;
            }
            else if (i == flowerbed.Length - 1 && flowerbed.Length == 1)
            {
                n --;
            }
            else if(i == flowerbed.Length - 1 && flowerbed[i - 1] == 0 && n != 0)
            {
                n --;
            }
            else if(i+1 <= flowerbed.Length - 1 && flowerbed[i+1] == 0 && n != 0)
            {
                n --;
                flowerbed[i] = 1;
                if(i+1 < flowerbed.Length - 1)
                {
                    i ++;
                }
                
            }
        }

        return n == 0;
    }
}
```
